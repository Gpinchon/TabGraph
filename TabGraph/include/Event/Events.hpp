/*
* @Author: gpi
* @Date:   2019-02-22 16:19:03
* @Last Modified by:   gpinchon
* @Last Modified time: 2019-08-11 12:07:19
*/

#pragma once

#include "Event/Signal.hpp"

#include <SDL_events.h> // for SDL_Event, SDL_EventType
#include <SDL_stdinc.h> // for Uint32
#include <map> // for map
#include <set>
#include <vector>
#include <memory>

#define EVENT_REFRESH 0

class InputDevice;
template <typename Signature>
class Callback;

/** Handles InputDevice and events generated by the Engine
*/
class Events : public Trackable {
public:
    static void Add(InputDevice* device, SDL_EventType event_type);
    static void Remove(InputDevice* device, SDL_EventType event_type);
    static Signal<float> &OnRefresh();

private:
    static int _Filter(void* e, SDL_Event* event);
    void _Refresh(float);
    static Events& _Get();
    Signal<float> _onRefresh;
    std::map<Uint32, std::set<InputDevice*>> _input_devices;
    Events();
};
